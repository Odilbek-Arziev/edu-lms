import axios, {AxiosResponse, AxiosRequestConfig} from "axios";
import config from "../config";

const {api} = config;

/**
 * –°–æ–∑–¥–∞—ë–º –¥–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞: –ø—É–±–ª–∏—á–Ω—ã–π (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞) –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π (—Å —Ç–æ–∫–µ–Ω–æ–º)
 */
const defaultConfig = {
    baseURL: api.API_URL,
    headers: {
        "Content-Type": "application/json",
    },
};

const publicAxios = axios.create(defaultConfig);
const authAxios = axios.create(defaultConfig);

// Response interceptor –¥–ª—è –æ–±–æ–∏—Ö
const responseInterceptor = (response: any) =>
    response.data ? response.data : response;

const errorInterceptor = (error: any) => {

    if (error.response) {
        console.error("Response data:", error.response.data);
        console.error("Response status:", error.response.status);
        return Promise.reject(error);
    }

    return Promise.reject({
        response: {
            data: {non_field_errors: ["–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é"]},
        },
    });
};

publicAxios.interceptors.response.use(responseInterceptor, errorInterceptor);
authAxios.interceptors.response.use(responseInterceptor, errorInterceptor);

authAxios.interceptors.request.use(
    (config) => {
        const user = getLoggedinUser();
        if (user && user.access) {
            config.headers["Authorization"] = `Bearer ${user.access}`;
        } else {
            console.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:", config.url);
        }
        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
 */
const setAuthorization = (token: string | null) => {

    if (!token) {
        console.log("‚ö†Ô∏è –¢–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º Authorization header");
        delete authAxios.defaults.headers.common["Authorization"];
        return;
    }

    authAxios.defaults.headers.common["Authorization"] = `Bearer ${token}`;
};

/**
 * –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
 */
const getLoggedinUser = () => {
    let user = localStorage.getItem("authUser");

    if (!user) {
        console.log("‚ö†Ô∏è authUser –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage, –ø—Ä–æ–≤–µ—Ä—è–µ–º sessionStorage");
        user = sessionStorage.getItem("authUser");
    }

    if (!user) {
        console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ localStorage, –Ω–∏ –≤ sessionStorage");
        return null;
    }

    try {
        const parsed = JSON.parse(user);
        return parsed;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ authUser:", error);
        return null;
    }
};

/**
 * –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
const clearAuth = () => {
    console.log("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    localStorage.removeItem("authUser");
    sessionStorage.removeItem("authUser");
    delete authAxios.defaults.headers.common["Authorization"];
};

/**
 * –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const setLoggedinUser = (userData: any) => {
    console.log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

    if (!userData || !userData.access || !userData.refresh) {
        console.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userData);
        return false;
    }

    try {
        localStorage.setItem("authUser", JSON.stringify(userData));
        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage");

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω —Å—Ä–∞–∑—É
        setAuthorization(userData.access);

        return true;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", error);
        return false;
    }
};

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π APIClient
 */
class APIClient {
    private client: typeof publicAxios | typeof authAxios;

    constructor(auth: boolean = true) {
        this.client = auth ? authAxios : publicAxios;
        console.log(`üîß APIClient —Å–æ–∑–¥–∞–Ω (auth: ${auth})`);
    }

    get = (url: string, params?: any): Promise<AxiosResponse> => {
        let queryString = "";
        if (params) {
            queryString = Object.keys(params)
                .map((key) => `${key}=${params[key]}`)
                .join("&");
        }
        const fullUrl = queryString ? `${url}?${queryString}` : url;
        console.log(`üì§ GET –∑–∞–ø—Ä–æ—Å: ${fullUrl}`);
        return this.client.get(fullUrl);
    };

    create = (url: string, data: any): Promise<AxiosResponse> => {
        console.log(`üì§ POST –∑–∞–ø—Ä–æ—Å: ${url}`);
        return this.client.post(url, data);
    };

    update = (url: string, data: any): Promise<AxiosResponse> => {
        console.log(`üì§ PATCH –∑–∞–ø—Ä–æ—Å: ${url}`);
        return this.client.patch(url, data);
    };

    put = (url: string, data: any): Promise<AxiosResponse> => {
        console.log(`üì§ PUT –∑–∞–ø—Ä–æ—Å: ${url}`);
        return this.client.put(url, data);
    };

    delete = (url: string, config?: AxiosRequestConfig): Promise<AxiosResponse> => {
        console.log(`üì§ DELETE –∑–∞–ø—Ä–æ—Å: ${url}`);
        return this.client.delete(url, {...config});
    };
}

export {
    APIClient,
    setAuthorization,
    getLoggedinUser,
    setLoggedinUser,
    clearAuth,
    publicAxios,
    authAxios
};